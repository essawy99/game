// IN ORDER TO IMPLEMENT, REPLACE BUILDING SCRIPT W THIS ONE// REMOVE BUILDING DECLARATION IN ANIMATION AND DECLARE // BACKGROUND HEALTH AND TANKS(parameter: how many tanks desired) SEPERATELY// NOTE, EITHER SHRINK OR MOVE BOAT UP SMALL PORTION//-----------------------------------------------------------------------------var win = window,doc = document,docElem = doc.documentElement,body = doc.getElementsByTagName('body')[0],w = win.innerWidth || docElem.clientWidth || body.clientWidth,h = win.innerHeight|| docElem.clientHeight|| body.clientHeight;var height = h - (h/6);var width = w/15;var wUnit = w/1000;var hUnit = h/1000;var center =  w/2;//-----------------------------------------------------------------------------//Paper set uppaper.install(win);paper.setup(doc.getElementById("myCanvas"));class Background { //DHEVAA TODO: Implement wave animation on shore	constructor() {		const rect = new Path.Rectangle(new Point(0, 0), new Size(x, y));		rect.fillColor = new Color("#42adf5");				const rect2 = new Path.Rectangle(new Point(0, 7 * y / 8), new Size(x, y));		rect2.fillColor = new Color("#ebd8a0");	}}class Tanks { //DHEVA TODO: Implement explosion animation on damage	static tankArray = [];		constructor(amount) {		this._numTanks = amount;		this.initDraw();	}		get numTanks() { return this._numTanks; }		initDraw() {		const tankSpacing = x / (this._numTanks + 1);		const tankUnit = (2 * y / 64);		for(let i = 1; tankSpacing * i < w; i++) {			Tanks.tankArray.push(this.drawTank(new Point((tankSpacing*i)-(tankUnit/2), (57*y/64)), tankUnit));		}	}		drawTank (point, unit) {		let tank = new Path.Rectangle(point, new Size(unit, 2 * unit));		console.log(point.x);		console.log(point.y)		tank.fillColor = new Color("#0b5703");		tank.strokeColor = new Color("#074001");		return tank	}}class Health { //DHEVA TODO: Implement bar decrease animation on damage	constructor() {		this._health = 100;				this._healthBar = new Path.Rectangle(new Point (x / 16, 31*y/32), new Size(x*7/8, y/64));		this._healthBar.fillColor = new Color("#db2316");	}		get health() { return this._health; }		takeDamage(damagePercent) {		this._health -= damage;	}}